<?php
error_reporting(E_ALL);
require_once '../config.php';
require_once '../phplib/utils.php';
require_once '../phplib/timeago.php';
require_once '../phplib/NagiosApi.php';
require_once '../phplib/NagiosLivestatus.php';


if (!function_exists('curl_init')) {
  die("ERROR: The PHP curl extension must be installed for Nagdash to function");
}

$nagios_host_status = array(0 => "UP", 1 => "DOWN", 2 => "UNREACHABLE");
$nagios_service_status = array(0 => "OK", 1 => "WARNING", 2 => "CRITICAL", 3 => "UNKNOWN");
$nagios_host_status_colour = array(0 => "status_green", 1 => "status_red", 2 => "status_yellow");
$nagios_service_status_colour = array(0 => "status_green", 1 => "status_yellow", 2 => "status_red", 3 => "status_grey");

$nagios_toggle_status = array(0 => "disabled", 1 => "enabled");

$sort_by_time = ( isset($sort_by_time) && $sort_by_time ) ? true : false;

// Check to see if the user has a cookie disable some nagios instances
if (array_key_exists('nagdash_unwanted_hosts', $_COOKIE)) {
    $unwanted_hosts = unserialize($_COOKIE['nagdash_unwanted_hosts']);
} else {
    $unwanted_hosts = array();
}

if (!is_array($unwanted_hosts)) $unwanted_hosts = array();


// Check to see if the user has a cookie to filter out unrequired hosts
if (array_key_exists('nagdash_hostfilter', $_COOKIE)) {
    $cookie_filter = $_COOKIE['nagdash_hostfilter'];
}

if (!empty($cookie_filter)) {
    $filter = $cookie_filter;
}

// If the user wants to filter by last state change, grab the filter value.
// Else default to '0' (we won't filter by last state change).
// IDEA: Perhaps we create a $filter array tp pass to
// NagdashHelpers::parse_nagios_host_data() that contains the values of 'hostfilter',
// 'select_last_state_change', 'sort_by_time', and 'sort_descending'.
if (isset($_COOKIE['select_last_state_change'])) {
    $filter_select_last_state_change = (int) $_COOKIE['select_last_state_change'];
} else {
    $filter_select_last_state_change = 0;
}

// If 1, the user wants to sort by time; 0 if not.
if (isset($_COOKIE['sort_by_time'])) {
    $filter_sort_by_time = (int) $_COOKIE['sort_by_time'];
}

// If 1, the user wants to sort descending; 0 if not.
if (isset($_COOKIE['sort_descending'])) {
    $filter_sort_descending = (int) $_COOKIE['sort_descending'];
}

// Collect the API data from each Nagios host.

if (isset($mock_state_file)) {
    $data = json_decode(file_get_contents($mock_state_file), true);
    $state = $data['content'];
    $errors = [];
    $curl_stats = [];
    $api_cols = [];
} else {
    list($state, $api_cols, $errors, $curl_stats) = NagdashHelpers::get_nagios_host_data($upstream_nagios_hosts,
        $unwanted_hosts, $api_type);
}

// Sort the array alphabetically by cluster.
NagdashHelpers::deep_ksort($state);

// At this point, the data collection is completed.

if (count($errors) > 0) {
    foreach ($errors as $error) {
        echo "<div class='status_red'>{$error}</div>";
    }
}
list($host_summary, $service_summary, $down_hosts, $known_hosts, $known_services, $broken_services) = NagdashHelpers::parse_nagios_host_data($state, $filter, $api_cols, $filter_select_last_state_change);
?>

<?php
/*
 * TODO:
 * 1. Rewrite the HTML output so we no longer use <table>.
 * 2. Add support for 'long_plugin_output', 'notes', and 'action_url' fields.
 */
?>


<div id="wrapper">
    <div id="header-bar">
        <div class="name">Name</div>
        <div class="state">State</div>
        <div class="duration">Duration</div>
        <div class="detail">Details</div>
    </div> <!-- End header -->
    <div id="content">
        <a onClick="toggle_visibility('cluster_1_services');">
            <div class="cluster" id="cluster_1">
                    <div class="name ok">Cluster_1</div>
                <div class="state ok">&#x2B06 HEALTHY</div>
                <div class="duration ok">1 week</div>
                <div class="detail ok">Cluster is OK</div>
                <div class="services" id="cluster_1_services">
                    <a onClick="toggle_visibility('cluster_1_service_1_long_output');">
                    <div class="service-row" id="cluster_1_service_1">
                        <div class="name ok">Service_1</div>
                        <div class="state ok">&#x2B06 HEALTHY</div>
                        <div class="duration ok">1 week</div>
                        <div class="detail ok">Service_1 is OK</div>
                            <div class="service-long-output ok" id="cluster_1_service_1_long_output">
                                Service_1 is OK and happy to be here! More importantly, how are you? It's been rainy here all weekend and we can't wait to get outside in the sun. The kids are bouncing off the walls and, by extension, so are we.
                            </div>
                    </div>
                    </a>
                 </div>
            </div>
        </a>
    </div> <!-- End content -->
</div> <!-- End wrapper -->

<div id="info-window"><button class="close" onClick='$("#info-window").fadeOut("fast");'>&times;</button><div id="info-window-text"></div></div>
<div class="frame">
    <div class="section">
      <div class="header">
        <h2><a href="http://nagdash.etsycorp.com/">Make My Eyes Bleed</a></h3>
      </div>
      <div class="header">
        <h3>Cluster status</h3>
        <!--
        <p class="totals"><b>Total:</b> <?php foreach ($host_summary as $state => $count) { echo "<span class='{$nagios_host_status_colour[$state]}'>{$count}</span> "; } ?></p>
        -->
      </div>
    <table id="broken_hosts" class="widetable">
    <!--<tr><th>Cluster</th><th width="150px">State</th><th>Duration</th><th>Attempts</th><th>Detail</th></tr>-->
    <tr><th>Cluster</th><th width="150px">State</th><th>State Duration</th><th>Detail</th></tr>
<?php
    foreach ($down_hosts as $host) {
        echo "<tr id='host_row' class='{$nagios_host_status_colour[$host['host_state']]}'>";
        $tag = NagdashHelpers::print_tag($host['tag'], count($upstream_nagios_hosts));
        //echo "<td>{$host['hostname']} " . $tag . " <span class='controls'>";
        echo "<td><a style='color:white;' onClick=\"toggle_visibility('{$host['hostname']}_services');\">{$host['hostname']}</a> " . $tag . " <span class='controls'>";
        NagdashHelpers::render('controls.php',[ "tag" => $host['tag'],
                                            "host" => $host['hostname'],
                                            "service" => '']);
        echo "</span></td>";
        //echo "<td><blink>{$nagios_host_status[$host['host_state']]}</blink></td>";
        echo "<td>{$nagios_host_status[$host['host_state']]}</td>";
        echo "<td>{$host['duration']}</td>";
        //echo "<td>{$host['current_attempt']}/{$host['max_check_attempts']}</td>";
        echo "<td class=\"desc\">{$host['detail']}</td>";
        echo "</tr>";
        echo "<tr>";
        echo "<td>";
        echo "<div style='display:none' id='{$host['hostname']}_services'>";
        echo "<ul style='list-style-type:none'>";
        foreach ($host['services'] as $service) {
            $tag = NagdashHelpers::print_tag($service['tag'], count($upstream_nagios_hosts));
            echo "<li style='margin:2px;' class='bold {$nagios_service_status_colour[$service['service_state']]}'>" . $service['service_name']. $tag . " <span class='controls'>";
            NagdashHelpers::render('controls.php', ["tag" => $service['tag'],
                                                "host" => $service['hostname'],
                                                "service" => $service['service_name']]);
            echo "</span>";
            echo "</li>";
        }
        echo "</ul>";
        echo "</div>";
        echo "</td>";
        echo "</tr>";
    }
?>
    </table>
    </div>
</div>

<?php

echo "<!-- nagios-api server status: -->";
foreach ($curl_stats as $server => $server_stats) {
    echo "<!-- {$server_stats['url']} returned code {$server_stats['http_code']}, {$server_stats['size_download']} bytes ";
    echo "in {$server_stats['total_time']} seconds (first byte: {$server_stats['starttransfer_time']}). JSON parsed " . (isset($server_stats['objects']) ? $server_stats['objects'] : null) . " hosts -->\n";
}

?>
